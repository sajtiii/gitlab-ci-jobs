include:
  - template: Dependency-Scanning.gitlab-ci.yml

stages:
  - formatting
  - codequality
  - test
  - deploy

# Variables
variables:
  MYSQL_HOST: mysql
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: mysql_database
  MYSQL_USER: mysql_username
  MYSQL_PASSWORD: mysql_password
cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"



##########################
#     Code formatting    #
##########################
formatter:
  stage: formatting
  image: "php:${PHP_VERSION}-cli-alpine"
  except:
    - "${FORMATTER_BRANCH_NAME}"
    - master
    - tags
  before_script:
    - php -v
    - apk add --no-cache curl git openssh-client
    - eval `ssh-agent -s`
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${SSH_PUBLIC_KEY}" >> ~/.ssh/id_rsa.pub
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.email "${FORMATTER_EMAIL}"
    - git config --global user.name "${FORMATTER_NAME}"
    - curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer
    - composer global require "squizlabs/php_codesniffer=*"
  script:
    - set +e
    - /root/.composer/vendor/bin/phpcbf
    - set -e
    - git remote show origin
    - git remote set-url --push origin "git@${FORMATTER_ORIGIN_URL}:$CI_PROJECT_PATH"
    - git remote show origin
    - git add .
    - git update-index -q --refresh
    - test -z "$(git diff-index --name-only HEAD --)" && echo "Nothing changed! Aborting..." && exit 0
    - echo "Has changes. Committing..."
    - set +e
    - if [[ "$FORMATTER_MODE" == "branch" ]]; then git push origin --delete "$CI_COMMIT_REF_NAME-${FORMATTER_BRANCH_NAME}"; fi
    - if [[ "$FORMATTER_MODE" == "merge" ]]; then git push origin --delete "$CI_COMMIT_REF_NAME-${FORMATTER_BRANCH_NAME}"; fi
    - set -e
    - if [[ "$FORMATTER_MODE" == "branch" ]]; then git checkout -b "$CI_COMMIT_REF_NAME-${FORMATTER_BRANCH_NAME}"; fi
    - if [[ "$FORMATTER_MODE" == "merge" ]]; then git checkout -b "$CI_COMMIT_REF_NAME-${FORMATTER_BRANCH_NAME}"; fi
    - git commit -m "${FORMATTER_COMMIT_MESSAGE}"
    - if [[ "$FORMATTER_MODE" == "push" ]]; then git push --follow-tags origin HEAD:$CI_COMMIT_REF_NAME; fi
    - if [[ "$FORMATTER_MODE" == "branch" ]]; then git push -u origin "$CI_COMMIT_REF_NAME-${FORMATTER_BRANCH_NAME}"; fi
    - if [[ "$FORMATTER_MODE" == "merge" ]]; then git push -u -o merge_request.create -o merge_request.target=$CI_COMMIT_REF_NAME -o merge_request.remove_source_branch origin "$CI_COMMIT_REF_NAME-${FORMATTER_BRANCH_NAME}"; fi



##########################
#   CodeQuality checks   #
##########################
phpcs:
  stage: codequality
  image: "php:${PHP_VERSION}-cli-alpine"
  before_script:
    - php -v
    - apk add --no-cache curl
    - curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer
    - composer global require "squizlabs/php_codesniffer=*"
  script:
    - /root/.composer/vendor/bin/phpcs

phpcpd:
  stage: codequality
  image: "php:${PHP_VERSION}-cli-alpine"
  before_script:
    - php -v
    - apk add --no-cache curl
    - test -f phpcpd.phar || curl -L https://phar.phpunit.de/phpcpd.phar -o phpcpd.phar
  script:
    - php phpcpd.phar ./ --min-lines="${PHPCPD_MIN_LINES}"



##########################
#    Dependabot checks   #
##########################
# dependabot:
#   stage: security
#   image: "php:${PHP_VERSION}-cli-alpine"
#   needs:
#     - phpcs
#     - phpcpd
#   variables:
#     SECURITY_CHECKER_FILENAME: local-php-security-checker_1.0.0_linux_amd64
#     SECURITY_CHECKER_URL: "https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/${SECURITY_CHECKER_FILENAME}"
#   before_script:
#     - php -v
#     - apk add --no-cache curl
#   script:
#     - test -f "${SECURITY_CHECKER_FILENAME}" || curl -L ${SECURITY_CHECKER_URL} -o "${SECURITY_CHECKER_FILENAME}"
#     - chmod +x "${SECURITY_CHECKER_FILENAME}"
#     - "./${SECURITY_CHECKER_FILENAME}"



##########################
#    Run PHPUnit Tests   #
##########################
phpunit:
  stage: test
  image: "edbizarro/gitlab-ci-pipeline-php:${PHP_VERSION}"
  # needs:
  #   - dependabot
  variables:
    COMPOSER_AUTH_FILE: "{\"gitlab-token\":{\"gitlab.com\":\"${GITLAB_COMPOSER_REPOSITORY_TOKEN}\"}}"
  before_script:
    - if [ ! -d "/tests" ]; then echo "tests/ directory not found. Skipping testing." && exit 0; fi
    - php -v
  script:
    - echo "${COMPOSER_AUTH_FILE}" > auth.json
    - composer install --no-interaction --quiet --prefer-dist
    - ./vendor/bin/phpunit



##########################
#         Publish        #
##########################
publish:
  stage: deploy
  image: curlimages/curl:latest
  only:
    - tags
  needs:
    - phpunit
  when: manual
  variables:
    URL: "$CI_SERVER_PROTOCOL://$CI_SERVER_HOST:$CI_SERVER_PORT/api/v4/projects/$CI_PROJECT_ID/packages/composer?job_token=$CI_JOB_TOKEN"
  script:
    - version=$([[ -z "$CI_COMMIT_TAG" ]] && echo "branch=$CI_COMMIT_REF_NAME" || echo "tag=$CI_COMMIT_TAG")
    - insecure=$([ "$CI_SERVER_PROTOCOL" = "http" ] && echo "--insecure" || echo "")
    - response=$(curl -s -w "\n%{http_code}" $insecure --data $version $URL)
    - code=$(echo "$response" | tail -n 1)
    - body=$(echo "$response" | head -n 1)
    # Output state information
    - if [ $code -eq 201 ]; then
        echo "Package created - Code $code - $body";
      else
        echo "Could not create package - Code $code - $body";
        exit 1;
      fi
